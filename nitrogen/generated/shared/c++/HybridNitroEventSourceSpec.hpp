///
/// HybridNitroEventSourceSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridNitroEventSourceSpec` to properly resolve imports.
namespace margelo::nitro::nitroeventsource { class HybridNitroEventSourceSpec; }
// Forward declaration of `NitroEventSourceOptions` to properly resolve imports.
namespace margelo::nitro::nitroeventsource { struct NitroEventSourceOptions; }
// Forward declaration of `NitroEventSourceEvent` to properly resolve imports.
namespace margelo::nitro::nitroeventsource { struct NitroEventSourceEvent; }

#include <memory>
#include "HybridNitroEventSourceSpec.hpp"
#include <string>
#include "NitroEventSourceOptions.hpp"
#include <optional>
#include "NitroEventSourceEvent.hpp"
#include <functional>

namespace margelo::nitro::nitroeventsource {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroEventSource`
   * Inherit this class to create instances of `HybridNitroEventSourceSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroEventSource: public HybridNitroEventSourceSpec {
   * public:
   *   HybridNitroEventSource(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroEventSourceSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroEventSourceSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroEventSourceSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::nitroeventsource::HybridNitroEventSourceSpec> create(const std::string& url, const std::optional<NitroEventSourceOptions>& options) = 0;
      virtual void close() = 0;
      virtual void setEventCallback(const std::function<void(const NitroEventSourceEvent& /* event */)>& callback) = 0;
      virtual void addEventListener(const std::string& type, const std::function<void(const NitroEventSourceEvent& /* event */)>& listener) = 0;
      virtual void removeEventListener(const std::string& type, const std::function<void(const NitroEventSourceEvent& /* event */)>& listener) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroEventSource";
  };

} // namespace margelo::nitro::nitroeventsource
