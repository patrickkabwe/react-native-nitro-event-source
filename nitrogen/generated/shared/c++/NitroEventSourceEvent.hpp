///
/// NitroEventSourceEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitroeventsource {

  /**
   * A struct which can be represented as a JavaScript object (NitroEventSourceEvent).
   */
  struct NitroEventSourceEvent {
  public:
    std::string id     SWIFT_PRIVATE;
    std::string type     SWIFT_PRIVATE;
    std::string data     SWIFT_PRIVATE;

  public:
    NitroEventSourceEvent() = default;
    explicit NitroEventSourceEvent(std::string id, std::string type, std::string data): id(id), type(type), data(data) {}
  };

} // namespace margelo::nitro::nitroeventsource

namespace margelo::nitro {

  using namespace margelo::nitro::nitroeventsource;

  // C++ NitroEventSourceEvent <> JS NitroEventSourceEvent (object)
  template <>
  struct JSIConverter<NitroEventSourceEvent> final {
    static inline NitroEventSourceEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroEventSourceEvent(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "id")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "data"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroEventSourceEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "id", JSIConverter<std::string>::toJSI(runtime, arg.id));
      obj.setProperty(runtime, "type", JSIConverter<std::string>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "data", JSIConverter<std::string>::toJSI(runtime, arg.data));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "id"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "data"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
