///
/// NitroEventSourceOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>
#include <unordered_map>

namespace margelo::nitro::nitroeventsource {

  /**
   * A struct which can be represented as a JavaScript object (NitroEventSourceOptions).
   */
  struct NitroEventSourceOptions {
  public:
    std::optional<bool> withCredentials     SWIFT_PRIVATE;
    std::optional<std::unordered_map<std::string, std::string>> headers     SWIFT_PRIVATE;
    std::optional<bool> rawMode     SWIFT_PRIVATE;

  public:
    NitroEventSourceOptions() = default;
    explicit NitroEventSourceOptions(std::optional<bool> withCredentials, std::optional<std::unordered_map<std::string, std::string>> headers, std::optional<bool> rawMode): withCredentials(withCredentials), headers(headers), rawMode(rawMode) {}
  };

} // namespace margelo::nitro::nitroeventsource

namespace margelo::nitro {

  using namespace margelo::nitro::nitroeventsource;

  // C++ NitroEventSourceOptions <> JS NitroEventSourceOptions (object)
  template <>
  struct JSIConverter<NitroEventSourceOptions> final {
    static inline NitroEventSourceOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroEventSourceOptions(
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "withCredentials")),
        JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::fromJSI(runtime, obj.getProperty(runtime, "headers")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "rawMode"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroEventSourceOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "withCredentials", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.withCredentials));
      obj.setProperty(runtime, "headers", JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::toJSI(runtime, arg.headers));
      obj.setProperty(runtime, "rawMode", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.rawMode));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "withCredentials"))) return false;
      if (!JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::canConvert(runtime, obj.getProperty(runtime, "headers"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "rawMode"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
